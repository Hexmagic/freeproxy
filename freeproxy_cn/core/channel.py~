import aiohttp
from logzero import logger
from typing import List, Tuple
from freeproxy_cn.core.http import AsyncHttpHandler
from freeproxy_cn.util.pipe import head, to_doc, xpath, trim


class Channel(object):
    site_name = 'site'
    start_urls: list = []  # 需要自己进行填充

    def __init__(self, max_keep=float('inf'), *arg, **kwargs):
        self.http_handler = AsyncHttpHandler()
        self.session = aiohttp.ClientSession()
        self.max_keep = max_keep
        self.start_pos = 2
        self.positions = [1, 2]
        self.xpath_plt = './td[position()={}]//text()'


    async def bootstrap(self):
        pass

    async def run(self):
        rst = []
        for url in self.start_urls:
            proxies = await self.handle(url)
            rst += proxies
        return rst

    async def handle(self, url: str) -> List[Tuple[str, str]]:
        doc = await self.http_handler.get(self.session, url) >> to_doc
        items = doc.xpath("//table//tr[position()>=%s]" % self.start_pos)
        proxies = []
        for item in items:
            host_position, port_position = self.positions
            host = item >> xpath(self.xpath_plt.format(
                host_position)) >> head >> trim
            if not host:
                # 匹配失败
                continue
            port = item >> xpath(self.xpath_plt.format(
                port_position)) >> head >> trim
            if len(port) > 5:
                continue
            proxies.append((host, port))
        return proxies